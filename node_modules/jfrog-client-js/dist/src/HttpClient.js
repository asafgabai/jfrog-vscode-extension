"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_retry_1 = __importDefault(require("axios-retry"));
class HttpClient {
    constructor(config) {
        config.headers = config.headers || {};
        this.addUserAgentHeader(config.headers);
        this._axiosInstance = axios_1.default.create({
            baseURL: config.serverUrl,
            headers: config.headers,
            proxy: this.getAxiosProxyConfig(config.proxy),
        });
        this._basicAuth = {
            username: config.username,
            password: config.password,
        };
        this._accessToken = config.accessToken || '';
        axios_retry_1.default(this._axiosInstance, {
            retries: config.retries ? config.retries : HttpClient.DEFAULT_RETRIES,
        });
    }
    async doRequest(requestParams) {
        const { data } = await this._axiosInstance(requestParams);
        return data;
    }
    async doAuthRequest(requestParams) {
        if (this._accessToken !== '') {
            this.addAuthHeader(requestParams);
        }
        else {
            requestParams.auth = this._basicAuth;
        }
        return this.doRequest(requestParams);
    }
    addUserAgentHeader(headers) {
        if (!headers[HttpClient.USER_AGENT_HEADER]) {
            headers[HttpClient.USER_AGENT_HEADER] = 'jfrog-client-js';
        }
    }
    addAuthHeader(requestParams) {
        if (!requestParams.headers) {
            requestParams.headers = {};
        }
        if (!requestParams.headers[HttpClient.AUTHORIZATION_HEADER]) {
            requestParams.headers[HttpClient.AUTHORIZATION_HEADER] = 'Bearer ' + this._accessToken;
        }
    }
    /**
     * @param proxyConfig - Receives on of the three:
     * 1. IProxyConfig to use specific proxy config.
     * 2. 'false' to disable proxy.
     * 3. 'undefined' to use environment variables if exist.
     *
     * @returns AxiosProxyConfig to use specific proxy config, false to disable proxy or undefined to use environment.
     */
    getAxiosProxyConfig(proxyConfig) {
        // Return false to disable proxy or undefined to use default environment variables.
        if (!proxyConfig) {
            return proxyConfig;
        }
        // Return undefined to use default environment variables.
        const proxyHost = proxyConfig.host;
        const proxyPort = proxyConfig.port;
        if (!proxyHost && !proxyPort) {
            return undefined;
        }
        return {
            host: proxyConfig.host,
            port: proxyConfig.port,
            protocol: proxyConfig.protocol,
        };
    }
}
exports.HttpClient = HttpClient;
HttpClient.AUTHORIZATION_HEADER = 'Authorization';
HttpClient.USER_AGENT_HEADER = 'User-Agent';
HttpClient.DEFAULT_RETRIES = 3;
//# sourceMappingURL=HttpClient.js.map