import { IProxyConfig } from '../model';
export declare class HttpClient {
    private static readonly AUTHORIZATION_HEADER;
    private static readonly USER_AGENT_HEADER;
    private static readonly DEFAULT_RETRIES;
    private readonly _basicAuth;
    private readonly _accessToken;
    private readonly _axiosInstance;
    constructor(config: IHttpConfig);
    doRequest(requestParams: IRequestParams): Promise<any>;
    doAuthRequest(requestParams: IRequestParams): Promise<any>;
    private addUserAgentHeader;
    private addAuthHeader;
    /**
     * @param proxyConfig - Receives on of the three:
     * 1. IProxyConfig to use specific proxy config.
     * 2. 'false' to disable proxy.
     * 3. 'undefined' to use environment variables if exist.
     *
     * @returns AxiosProxyConfig to use specific proxy config, false to disable proxy or undefined to use environment.
     */
    private getAxiosProxyConfig;
}
interface BasicAuth {
    username: string;
    password: string;
}
export interface IHttpConfig {
    serverUrl?: string;
    username?: string;
    password?: string;
    accessToken?: string;
    proxy?: IProxyConfig | false;
    headers?: {
        [key: string]: string;
    };
    retries?: number;
}
export declare type method = 'GET' | 'POST';
export interface IRequestParams {
    url: string;
    method: method;
    data?: any;
    auth?: BasicAuth;
    timeout?: number;
    headers?: any;
    validateStatus?: ((status: number) => boolean) | null;
}
export {};
