"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JfrogClient = void 0;
const XrayClient_1 = require("./Xray/XrayClient");
const ArtifactoryClient_1 = require("./Artifactory/ArtifactoryClient");
class JfrogClient {
    constructor(_jfrogConfig) {
        this._jfrogConfig = _jfrogConfig;
        if (!_jfrogConfig.platformUrl && !_jfrogConfig.xrayUrl && !_jfrogConfig.artifactoryUrl) {
            throw new Error('JFrog client: must provide platform or specific URLs');
        }
    }
    artifactory() {
        return new ArtifactoryClient_1.ArtifactoryClient(this.getSpecificClientConfig(JfrogClient.ARTIFACTORY_SUFFIX, this._jfrogConfig.artifactoryUrl));
    }
    xray() {
        return new XrayClient_1.XrayClient(this.getSpecificClientConfig(JfrogClient.XRAY_SUFFIX, this._jfrogConfig.xrayUrl));
    }
    /**
     * Creates a server specific config from the provided JFrog config.
     * @param serverSuffix - server specific suffix.
     * @param providedCustomUrl - custom server URL, if provided.
     * @private
     */
    getSpecificClientConfig(serverSuffix, providedCustomUrl) {
        return { serverUrl: this.getServerUrl(serverSuffix, providedCustomUrl), ...this._jfrogConfig };
    }
    getServerUrl(serverSuffix, providedCustomUrl) {
        let url = providedCustomUrl || '';
        if (!url) {
            if (!this._jfrogConfig.platformUrl) {
                throw new Error(serverSuffix + ' client: must provide platform or specific URLs');
            }
            url = JfrogClient.addTrailingSlashIfMissing(this._jfrogConfig.platformUrl) + serverSuffix + '/';
        }
        return url;
    }
    static addTrailingSlashIfMissing(url) {
        return url + (url.endsWith('/') ? '' : '/');
    }
}
exports.JfrogClient = JfrogClient;
JfrogClient.ARTIFACTORY_SUFFIX = 'artifactory';
JfrogClient.XRAY_SUFFIX = 'xray';
//# sourceMappingURL=JfrogClient.js.map