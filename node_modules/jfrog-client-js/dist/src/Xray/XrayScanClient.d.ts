import { HttpClient } from '..';
import { IGraphRequestModel, IGraphResponse, ILogger } from '../../model/';
import { XrayScanProgress } from './XrayScanProgress';
export declare class XrayScanClient {
    private readonly httpClient;
    private readonly logger;
    private static readonly scanGraphEndpoint;
    private static readonly SLEEP_INTERVAL_MILLISECONDS;
    private static readonly MAX_ATTEMPTS;
    constructor(httpClient: HttpClient, logger: ILogger);
    graph(request: IGraphRequestModel, progress: XrayScanProgress, checkCanceled: () => void, projectKey: string | undefined, sleepIntervalMilliseconds?: number): Promise<IGraphResponse>;
    /**
     *
     * Sends 'GET /scan/graph?...' requests to Xray and waits for 200 response.
     * If 202 response is received, it updates the progress and waits sleepIntervalMilliseconds.
     * If any other response received, it throws an error.
     *
     * @param scanId - The scan ID received from Xray, after running a 'POST scan/graph' request
     * @param progress - The progress that will be updated after every 202 response from Xray
     * @param checkCanceled - Function that may stop the scan if it throws an exception
     * @param includeVulnerabilities - True if no context (project or watches) is provided
     * @param sleepIntervalMilliseconds - Sleep interval in milliseconds between attepts
     * @returns the graph response
     * @throws an exception if an unexpected response received from Xray or if checkCanceled threw an exception
     */
    private getScanGraphResults;
    private delay;
}
