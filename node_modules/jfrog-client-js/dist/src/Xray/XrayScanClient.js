"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayScanClient = void 0;
class XrayScanClient {
    constructor(httpClient, logger) {
        this.httpClient = httpClient;
        this.logger = logger;
    }
    async graph(request, progress, checkCanceled, projectKey, sleepIntervalMilliseconds = XrayScanClient.SLEEP_INTERVAL_MILLISECONDS) {
        try {
            if (!request) {
                return {};
            }
            const projectProvided = projectKey !== undefined && projectKey.length > 0;
            this.logger.debug('Sending POST scan/graph request...');
            const requestParams = {
                url: XrayScanClient.scanGraphEndpoint + (projectProvided ? `?project=${projectKey}` : ''),
                method: 'POST',
                data: request,
            };
            this.logger.debug('data: ' + JSON.stringify(request));
            checkCanceled();
            const response = await this.httpClient.doAuthRequest(requestParams);
            return await this.getScanGraphResults(response.scan_id, progress, checkCanceled, !projectProvided, sleepIntervalMilliseconds);
        }
        finally {
            progress.setPercentage(100);
        }
    }
    /**
     *
     * Sends 'GET /scan/graph?...' requests to Xray and waits for 200 response.
     * If 202 response is received, it updates the progress and waits sleepIntervalMilliseconds.
     * If any other response received, it throws an error.
     *
     * @param scanId - The scan ID received from Xray, after running a 'POST scan/graph' request
     * @param progress - The progress that will be updated after every 202 response from Xray
     * @param checkCanceled - Function that may stop the scan if it throws an exception
     * @param includeVulnerabilities - True if no context (project or watches) is provided
     * @param sleepIntervalMilliseconds - Sleep interval in milliseconds between attepts
     * @returns the graph response
     * @throws an exception if an unexpected response received from Xray or if checkCanceled threw an exception
     */
    async getScanGraphResults(scanId, progress, checkCanceled, includeVulnerabilities, sleepIntervalMilliseconds) {
        const scanGraphUrl = XrayScanClient.scanGraphEndpoint +
            '/' +
            scanId +
            '?include_licenses=true' +
            `&include_vulnerabilities=${includeVulnerabilities}`;
        for (let i = 0; i < XrayScanClient.MAX_ATTEMPTS; i++) {
            checkCanceled();
            this.logger.debug(`Sending GET ${scanGraphUrl} request...`);
            let receivedStatus;
            const requestParams = {
                url: scanGraphUrl,
                method: 'GET',
                validateStatus: (status) => {
                    receivedStatus = status;
                    return status === 200 || status === 202;
                },
            };
            let message;
            const response = await this.httpClient
                .doAuthRequest(requestParams)
                .catch(async (reason) => {
                var _a;
                receivedStatus = (_a = reason.response) === null || _a === void 0 ? void 0 : _a.status;
                message = reason === null || reason === void 0 ? void 0 : reason.message;
            });
            this.logger.debug(`Received status '${receivedStatus}' from Xray.`);
            if (receivedStatus === 200) {
                return response;
            }
            if (receivedStatus === 202) {
                if (response.progress_percentage) {
                    progress.setPercentage(response.progress_percentage);
                }
            }
            else {
                if (receivedStatus) {
                    throw new Error(`Received unexpected status '${receivedStatus}' from Xray: ${message}`);
                }
                throw new Error(`Received response from Xray: ${message}`);
            }
            await this.delay(sleepIntervalMilliseconds);
        }
        throw new Error('Xray get scan graph exceeded the timeout.');
    }
    async delay(sleepIntervalMilliseconds) {
        return new Promise((resolve) => setTimeout(resolve, sleepIntervalMilliseconds));
    }
}
exports.XrayScanClient = XrayScanClient;
XrayScanClient.scanGraphEndpoint = 'api/v1/scan/graph';
XrayScanClient.SLEEP_INTERVAL_MILLISECONDS = 5000;
XrayScanClient.MAX_ATTEMPTS = 60;
//# sourceMappingURL=XrayScanClient.js.map