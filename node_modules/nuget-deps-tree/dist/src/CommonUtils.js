"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonUtils = void 0;
const pathUtils = __importStar(require("path"));
const fse = __importStar(require("fs-extra"));
const os = __importStar(require("os"));
const which_1 = __importDefault(require("which"));
const lodash = __importStar(require("lodash"));
const parser = __importStar(require("fast-xml-parser"));
class CommonUtils {
    /**
     * Searches for files with requested 'extension' at the requested 'path'.
     * Not directory recursive.
     * @param path - path to search in.
     * @param extension - extensions to match.
     * @returns array of files matching criteria.
     */
    static listFilesWithExtension(path, extension) {
        const files = [];
        fse.readdirSync(path).forEach((file) => {
            if (pathUtils.extname(file) === extension) {
                files.push(pathUtils.join(path, file));
            }
        });
        return files;
    }
    static isWindows() {
        return os.platform() === 'win32';
    }
    static readFileIfExists(filePath) {
        if (fse.pathExistsSync(filePath)) {
            return fse.readFileSync(filePath).toString();
        }
    }
    /**
     * Get path of executable (Unix 'which' command equivalent, for both Unix and Windows).
     * @param cmd - executable name.
     * @returns path to executable.
     */
    static lookPath(cmd) {
        return which_1.default.sync(cmd, { nothrow: true }) || '';
    }
    /**
     * Fix path to match the current operating system.
     * @param path - path to fix.
     * @returns fixed path.
     */
    static fixSeparatorsToMatchOs(path) {
        if (CommonUtils.isWindows()) {
            return path.replace(/\//g, '\\');
        }
        return path.replace(/\\/g, '/');
    }
    /**
     * Get a property in path from object, throw if doesn't exists.
     * @param obj - object to extract property from.
     * @param propertyPath - property's path in object.
     * @param objectName - object name, to print in error message if needed.
     * @returns value of property.
     */
    static getPropertyStrictly(obj, propertyPath, objectName) {
        const val = this.getPropertyOrUndefined(obj, propertyPath);
        if (val) {
            return val;
        }
        throw new Error("Expected '" + objectName + "' object to own property in path: '" + propertyPath + "'");
    }
    /**
     * Get a property in path from object, return undefined if not found.
     * Make sure not to use in a loop that isn't 'for in'.
     * @param obj - object to extract property from.
     * @param propertyPath - property's path in object.
     * @returns value of property or undefined.
     */
    static getPropertyOrUndefined(obj, propertyPath) {
        return lodash.get(obj, propertyPath);
    }
    /**
     * Parse content from xml file to an object.
     * Parsing is done in arrayMode, to always parse tags as arrays excluding leaf nodes.
     * Might throw arrow, call is responsible to catch if needed.
     * @param xmlContent.
     * @returns parsed xml object.
     */
    static parseXmlToObject(xmlContent) {
        return parser.parse(xmlContent, { ignoreAttributes: false, attributeNamePrefix: '', arrayMode: true });
    }
}
exports.CommonUtils = CommonUtils;
//# sourceMappingURL=CommonUtils.js.map