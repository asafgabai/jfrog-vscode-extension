export declare class CommonUtils {
    /**
     * Searches for files with requested 'extension' at the requested 'path'.
     * Not directory recursive.
     * @param path - path to search in.
     * @param extension - extensions to match.
     * @returns array of files matching criteria.
     */
    static listFilesWithExtension(path: string, extension: string): string[];
    static isWindows(): boolean;
    static readFileIfExists(filePath: string): string | undefined;
    /**
     * Get path of executable (Unix 'which' command equivalent, for both Unix and Windows).
     * @param cmd - executable name.
     * @returns path to executable.
     */
    static lookPath(cmd: string): string;
    /**
     * Fix path to match the current operating system.
     * @param path - path to fix.
     * @returns fixed path.
     */
    static fixSeparatorsToMatchOs(path: string): string;
    /**
     * Get a property in path from object, throw if doesn't exists.
     * @param obj - object to extract property from.
     * @param propertyPath - property's path in object.
     * @param objectName - object name, to print in error message if needed.
     * @returns value of property.
     */
    static getPropertyStrictly(obj: any, propertyPath: string, objectName: string): any;
    /**
     * Get a property in path from object, return undefined if not found.
     * Make sure not to use in a loop that isn't 'for in'.
     * @param obj - object to extract property from.
     * @param propertyPath - property's path in object.
     * @returns value of property or undefined.
     */
    static getPropertyOrUndefined(obj: any, propertyPath: string): any | undefined;
    /**
     * Parse content from xml file to an object.
     * Parsing is done in arrayMode, to always parse tags as arrays excluding leaf nodes.
     * Might throw arrow, call is responsible to catch if needed.
     * @param xmlContent.
     * @returns parsed xml object.
     */
    static parseXmlToObject(xmlContent: string): any;
}
