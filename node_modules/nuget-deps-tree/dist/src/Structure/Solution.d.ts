import { ProjectBuilder } from './Project';
export declare class Solution {
    private _filePath;
    private _projects;
    private _dependenciesSources;
    constructor(_filePath: string, _projects?: ProjectBuilder[], _dependenciesSources?: string[]);
    get filePath(): string;
    set filePath(value: string);
    get projects(): ProjectBuilder[];
    set projects(value: ProjectBuilder[]);
    get dependenciesSources(): string[];
    set dependenciesSources(value: string[]);
    /**
     * Create a solution object with projects and dependencies sources,
     * which will later be used to generate dependencies trees.
     * @param slnFilePath
     * @returns the solution object
     */
    static create(slnFilePath: string): Solution;
    /**
     * Recursively walk through the file system to find all potential dependencies sources:
     * packages.config and project.assets.json files.
     * @param slnFilePath
     */
    getDependenciesSources(slnFilePath: string): void;
    /**
     * Loads projects from solution file.
     * If there are none, a single project is expected to be found in the solution directory.
     */
    loadProjects(): void;
    loadProjectsFromSolutionFile(slnProjects: string[]): void;
    loadSingleProjectFromDir(): void;
    /**
     * Loads a project from path.
     * @param projectName
     * @param csprojPath
     */
    loadProject(projectName: string, csprojPath: string): void;
    /**
     * Parses the project's details from it's declaration line in the solution file.
     * @param projectLine - declaration line of the project in the solution file.
     * @param solutionDir
     * @returns parsed project object, with the project's name and path.
     */
    parseProject(projectLine: string, solutionDir: string): ParsedProject;
    removeQuotes(value: string): string;
    /**
     * Parse solution file for projects declarations.
     * @returns array of projects declarations lines.
     */
    parseSlnFile(): string[];
}
declare class ParsedProject {
    private _projectName;
    private _csprojPath;
    constructor(_projectName: string, _csprojPath: string);
    get csprojPath(): string;
    set csprojPath(value: string);
    get projectName(): string;
    set projectName(value: string);
}
export {};
