"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectBuilder = void 0;
const loglevel_1 = __importDefault(require("loglevel"));
const Extractor_1 = require("../AssetsJson/Extractor");
const Utils_1 = require("../DependencyTree/Utils");
const Extractor_2 = require("../PackagesConfig/Extractor");
class ProjectBuilder {
    constructor(_name, _rootPath, _dependenciesSource, _extractor) {
        this._name = _name;
        this._rootPath = _rootPath;
        this._dependenciesSource = _dependenciesSource;
        this._extractor = _extractor;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get rootPath() {
        return this._rootPath;
    }
    set rootPath(value) {
        this._rootPath = value;
    }
    get dependenciesSource() {
        return this._dependenciesSource;
    }
    set dependenciesSource(value) {
        this._dependenciesSource = value;
    }
    get extractor() {
        return this._extractor;
    }
    set extractor(value) {
        this._extractor = value;
    }
    /**
     * Creates a project builder with an extractor.
     * @param name - project name.
     * @param rootPath - path to project.
     * @param dependenciesSource - project's dependencies source.
     */
    static load(name, rootPath, dependenciesSource) {
        const ex = ProjectBuilder.getCompatibleExtractor(name, dependenciesSource);
        return new ProjectBuilder(name, rootPath, dependenciesSource, ex);
    }
    /**
     * Creates a dependency tree for project, using it's extractor.
     * @returns project's dependency tree.
     */
    createDependencyTree() {
        return Utils_1.DependenciesUtils.createDependencyTree(this._extractor);
    }
    /**
     * Create a dependency tree extractor, matching to the project's dependencies source.
     * @param projectName
     * @param dependenciesSource
     * @returns extractor for the project
     */
    static getCompatibleExtractor(projectName, dependenciesSource) {
        if (Extractor_2.PackagesExtractor.isCompatible(projectName, dependenciesSource)) {
            return Extractor_2.PackagesExtractor.newExtractor(dependenciesSource);
        }
        if (Extractor_1.AssetsExtractor.isCompatible(projectName, dependenciesSource)) {
            return Extractor_1.AssetsExtractor.newExtractor(dependenciesSource);
        }
        loglevel_1.default.debug('Unsupported project dependencies for project: %s', projectName);
        return null;
    }
}
exports.ProjectBuilder = ProjectBuilder;
//# sourceMappingURL=Project.js.map