"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NugetPackage = void 0;
const lodash = __importStar(require("lodash"));
const loglevel_1 = __importDefault(require("loglevel"));
const model_1 = require("../../model");
const CommonUtils_1 = require("../CommonUtils");
class NugetPackage {
    constructor(_id, _version, nuspecContent) {
        this._id = _id;
        this._version = _version;
        this._dependencies = new model_1.CaseInsensitiveMap();
        this.fillDependenciesMap(nuspecContent);
    }
    get dependencies() {
        return this._dependencies;
    }
    set dependencies(value) {
        this._dependencies = value;
    }
    get version() {
        return this._version;
    }
    set version(value) {
        this._version = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Fills the dependencies map of this nuget package from metadata found in nuspec file.
     * @param nuspecContent - Content read from nuspec file.
     */
    fillDependenciesMap(nuspecContent) {
        var _a, _b;
        // Read metadata from nuspec file.
        let nuspec;
        try {
            nuspec = CommonUtils_1.CommonUtils.parseXmlToObject(nuspecContent);
        }
        catch (error) {
            loglevel_1.default.warn("Package: %s couldn't be parsed due to: %s. Skipping the package dependency.", this._id + ':' + this._version, error);
            return;
        }
        // Get metadata dependencies if such exist. Check if fields exist before iterating over, but not strictly.
        const metaDataDep = lodash.get(nuspec, 'package[0].metadata[0].dependencies[0]');
        if (!metaDataDep) {
            return;
        }
        const depArray = lodash.get(metaDataDep, 'dependency');
        if (depArray) {
            for (const dependency of depArray) {
                (_a = this._dependencies) === null || _a === void 0 ? void 0 : _a.set(dependency.id, true);
            }
        }
        // Dependencies might be grouped.
        const groupArray = lodash.get(metaDataDep, 'group');
        if (groupArray) {
            for (const group of groupArray) {
                if (group.dependency) {
                    for (const dependency of group.dependency) {
                        (_b = this._dependencies) === null || _b === void 0 ? void 0 : _b.set(dependency.id, true);
                    }
                }
            }
        }
    }
}
exports.NugetPackage = NugetPackage;
//# sourceMappingURL=NugetPackage.js.map