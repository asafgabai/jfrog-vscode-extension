import { CaseInsensitiveMap, DependencyDetails, Extractor } from '../../model';
import { NugetPackage } from './NugetPackage';
export declare class PackagesExtractor implements Extractor {
    private _allDependencies;
    private _childrenMap;
    constructor(_allDependencies: CaseInsensitiveMap<DependencyDetails>, _childrenMap: CaseInsensitiveMap<string[]>);
    /**
     * Get map of all the dependencies of the project.
     * @returns map of lower cased dependencies IDs and their actual details.
     */
    allDependencies(): CaseInsensitiveMap<DependencyDetails>;
    /**
     * Get array of all the root dependencies of the project.
     * @returns array of the lower cased IDs of all root dependencies
     */
    directDependencies(): string[];
    /**
     * Get map of the dependencies relations map.
     * @returns map of lower cased dependencies IDs and an array of their lower cased dependencies IDs
     */
    childrenMap(): CaseInsensitiveMap<string[]>;
    /**
     * Checks if the project's dependencies source is of packages config type.
     * @param projectName
     * @param dependenciesSource
     * @returns true if compatible
     */
    static isCompatible(projectName: string, dependenciesSource: string): boolean;
    /**
     * Create new package config extractor.
     * @param dependenciesSource
     * @returns packages config extractor
     */
    static newExtractor(dependenciesSource: string): Extractor;
    /**
     * Get direct dependencies using DFS on all dependencies and children map.
     * @param allDependencies
     * @param childrenMap
     * @returns array of the ids' of all root dependencies
     */
    getDirectDependencies(allDependencies: CaseInsensitiveMap<DependencyDetails>, childrenMap: CaseInsensitiveMap<string[]>): string[];
    /**
     * Search for root dependencies and update maps accordingly.
     * @param dfsHelper
     * @param currentId
     * @param allDependencies
     * @param childrenMap
     * @param traversePath
     */
    searchRootDependencies(dfsHelper: CaseInsensitiveMap<DfsHelper>, currentId: string, allDependencies: CaseInsensitiveMap<DependencyDetails>, childrenMap: CaseInsensitiveMap<string[]>, traversePath: CaseInsensitiveMap<boolean>): void;
    /**
     * Get dfs helper for requested key.
     * @param dfsHelper
     * @param key
     * @returns dfs helper.
     */
    getDfs(dfsHelper: CaseInsensitiveMap<DfsHelper>, key: string): DfsHelper;
    /**
     * Extract all the extractor's needed dependencies map from the packages config file.
     * @param packagesConfig
     * @param globalPackagesCache
     */
    extract(packagesConfig: any, globalPackagesCache: string): void;
    /**
     * Creates a nuget package if found in cache in the requested version.
     * @param packagesPath - Path to global packages cache.
     * @param packageId - Requested package id.
     * @param packageVersion - Requested package version.
     * @returns A nuget package, or undefined if not found in cache.
     */
    createNugetPackage(packagesPath: string, packageId: string, packageVersion: string): NugetPackage | undefined;
    /**
     * NuGet allows the version to be with missing or unnecessary zeros.
     * This method generates an array of the possible alternative versions.
     * For example:
     * "1.0" --> []string{"1.0.0.0", "1.0.0", "1"}
     * "1" --> []string{"1.0.0.0", "1.0.0", "1.0"}
     * "1.2" --> []string{"1.2.0.0", "1.2.0"}
     * "1.22.33" --> []string{"1.22.33.0"}
     * "1.22.33.44" --> []string{}
     * "1.0.2" --> []string{"1.0.2.0"}
     * @param originalVersion - version listed in the packages config file.
     * @returns array of possible alternative versions.
     */
    createAlternativeVersionForms(originalVersion: string): string[];
    /**
     * Load packages config data, by reading the xml file and parsing.
     * @param dependenciesSource.
     * @returns packages config object.
     */
    loadPackagesConfig(dependenciesSource: string): any;
    /**
     * Get global packages cache path.
     * @returns path to cache.
     */
    getGlobalPackagesCache(): string;
    /**
     * Removes prefix from global packages command.
     * @param line - output of the command.
     * @returns - output after removing prefix.
     */
    removeGlobalPackagesPrefix(line: string): string;
    /**
     * Run global packages command.
     * @returns command output.
     */
    runGlobalPackagesCommand(): string;
    /**
     * Get path of executable suitable for running the command, according to the operating system.
     */
    getExecutablePath(): string;
    /**
     * NuGet can be run on non Windows OS in one of the following ways:
     * 1. using nuget client
     * 2. using Mono
     */
    getNonWindowsExecutablePath(): string;
}
declare class DfsHelper {
    private _visited;
    private _notRoot;
    private _circular;
    constructor(_visited: boolean, _notRoot: boolean, _circular: boolean);
    get circular(): boolean;
    set circular(value: boolean);
    get notRoot(): boolean;
    set notRoot(value: boolean);
    get visited(): boolean;
    set visited(value: boolean);
}
export {};
