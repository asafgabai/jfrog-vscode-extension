"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsExtractor = exports.assetsFileName = void 0;
const loglevel_1 = __importDefault(require("loglevel"));
const CommonUtils_1 = require("../CommonUtils");
const Utils_1 = require("./Utils");
exports.assetsFileName = 'project.assets.json';
class AssetsExtractor {
    constructor(_assets) {
        this._assets = _assets;
    }
    /**
     * Checks if the project's dependencies source is of assets type.
     * @param projectName - the project's name.
     * @param dependenciesSource - path to the project's dependencies source.
     * @returns true if compatible
     */
    static isCompatible(projectName, dependenciesSource) {
        if (dependenciesSource.endsWith(exports.assetsFileName)) {
            loglevel_1.default.debug('Found', dependenciesSource, 'file for project:', projectName);
            return true;
        }
        return false;
    }
    /**
     * Get map of all the dependencies of the project.
     * @returns map of lower cased dependencies IDs and their actual details.
     */
    allDependencies() {
        return Utils_1.AssetsUtils.getAllDependencies(this._assets);
    }
    /**
     * Get array of all the root dependencies of the project.
     * @returns array of the lower cased IDs of all root dependencies
     */
    directDependencies() {
        return Utils_1.AssetsUtils.getDirectDependencies(this._assets);
    }
    /**
     * Get map of the dependencies relations map.
     * @returns map of lower cased dependencies IDs and an array of their lower cased dependencies IDs
     */
    childrenMap() {
        return Utils_1.AssetsUtils.getChildrenMap(this._assets);
    }
    /**
     * Create new assets json extractor.
     * @param dependenciesSource
     * @returns assets extractor
     */
    static newExtractor(dependenciesSource) {
        const content = CommonUtils_1.CommonUtils.readFileIfExists(dependenciesSource);
        if (!content) {
            throw new Error('Unable to read file: ' + dependenciesSource);
        }
        const assets = JSON.parse(content);
        return new AssetsExtractor(assets);
    }
}
exports.AssetsExtractor = AssetsExtractor;
//# sourceMappingURL=Extractor.js.map