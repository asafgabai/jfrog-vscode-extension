"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsUtils = void 0;
const fse = __importStar(require("fs-extra"));
const loglevel_1 = __importDefault(require("loglevel"));
const pathUtils = __importStar(require("path"));
const model_1 = require("../../model");
const CommonUtils_1 = require("../CommonUtils");
const Utils_1 = require("../DependencyTree/Utils");
const Dependency_1 = require("../Structure/Dependency");
const Extractor_1 = require("./Extractor");
class AssetsUtils {
    /**
     * Get array of all the root dependencies of the project.
     * @returns array of the ids' of all root dependencies
     */
    static getDirectDependencies(assets) {
        const directDependencies = [];
        const frameworks = CommonUtils_1.CommonUtils.getPropertyOrUndefined(assets, 'project.frameworks');
        for (const framework in frameworks) {
            for (const dependencyId in CommonUtils_1.CommonUtils.getPropertyOrUndefined(frameworks[framework], 'dependencies')) {
                directDependencies.push(dependencyId);
            }
        }
        return directDependencies;
    }
    /**
     * Get map of all the dependencies of the project.
     * @param assets - object representing the assets json file
     * @returns map of lower cased dependencies IDs and their actual details.
     */
    static getAllDependencies(assets) {
        const dependencies = new model_1.CaseInsensitiveMap();
        // In case running on Unix, and the project was built on Windows, or vice versa.
        const packagesPath = CommonUtils_1.CommonUtils.fixSeparatorsToMatchOs(CommonUtils_1.CommonUtils.getPropertyStrictly(assets, 'project.restore.packagesPath', Extractor_1.assetsFileName));
        const libraries = CommonUtils_1.CommonUtils.getPropertyOrUndefined(assets, 'libraries');
        for (const dependency in libraries) {
            const library = libraries[dependency];
            const type = CommonUtils_1.CommonUtils.getPropertyStrictly(library, 'type', Extractor_1.assetsFileName);
            if (type === 'project') {
                continue;
            }
            const libraryPath = CommonUtils_1.CommonUtils.getPropertyStrictly(library, 'path', Extractor_1.assetsFileName);
            const nupkgFileName = this.getNupkgFileName(library, libraryPath);
            const nupkgFilePath = pathUtils.join(packagesPath, CommonUtils_1.CommonUtils.fixSeparatorsToMatchOs(libraryPath), nupkgFileName);
            // A package is a dependency if a nuget package file exists in Nuget cache directory.
            if (!fse.pathExistsSync(nupkgFilePath)) {
                if (this.isPackagePartOfTargetDependencies(assets, libraryPath)) {
                    loglevel_1.default.warn('The file', nupkgFilePath, "doesn't exist in the NuGet cache directory but it does exist as a target in the assets files." +
                        Utils_1.absentNupkgWarnMsg);
                    continue;
                }
                throw new Error('The file ' + nupkgFilePath + " doesn't exist in the NuGet cache directory.");
            }
            const splitDependency = this.getDependencyIdAndVersion(dependency);
            dependencies.set(splitDependency[0], new Dependency_1.Dependency(splitDependency[0], splitDependency[1]));
        }
        return dependencies;
    }
    /**
     * Get map of the dependencies relations map.
     * @returns dependencies ids' and an array of their dependencies ids'
     */
    static getChildrenMap(assets) {
        const dependenciesRelations = new model_1.CaseInsensitiveMap();
        // If has no target dependencies, loop is skipped.
        const targets = CommonUtils_1.CommonUtils.getPropertyOrUndefined(assets, 'targets');
        for (const target in targets) {
            const targetDependencies = targets[target];
            for (const dependency in targetDependencies) {
                const transitive = [];
                // If has no dependencies, loop is skipped.
                for (const transitiveName in CommonUtils_1.CommonUtils.getPropertyOrUndefined(targetDependencies[dependency], 'dependencies')) {
                    transitive.push(transitiveName);
                }
                const splitDependency = this.getDependencyIdAndVersion(dependency);
                dependenciesRelations.set(splitDependency[0], transitive);
            }
        }
        return dependenciesRelations;
    }
    /**
     * Parses a dependency for it's id and version.
     * @param dependency.
     * @returns id and version as array.
     */
    static getDependencyIdAndVersion(dependency) {
        const splitDependency = dependency.split('/');
        if (splitDependency.length !== 2) {
            throw Error('Unexpected dependency: ' + dependency + '. Could not parse id and version');
        }
        return splitDependency;
    }
    /**
     * If the package is included in the targets section of the assets.json file,
     * then this is a .NET dependency that shouldn't be included in the dependencies list (it come with the SDK).
     * Those files are located in the NuGetFallbackFolder directory.
     * @param assets - assets json object.
     * @param nugetPackageName - name of the package.
     * @returns true if part of targets.
     */
    static isPackagePartOfTargetDependencies(assets, nugetPackageName) {
        const targets = CommonUtils_1.CommonUtils.getPropertyOrUndefined(assets, 'targets');
        for (const target in targets) {
            for (const dependency in targets[target]) {
                // The package names in the targets section of the assets.json file are case insensitive.
                if (dependency.localeCompare(nugetPackageName, undefined, { sensitivity: 'accent' }) === 0) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Get the nuget package file of a dependency.
     * @param library - library object of a dependency in assets json.
     * @param libraryPath.
     * @returns file name.
     */
    static getNupkgFileName(library, libraryPath) {
        const files = CommonUtils_1.CommonUtils.getPropertyOrUndefined(library, 'files');
        if (files) {
            for (const fileName of files) {
                if (fileName.endsWith('nupkg.sha512')) {
                    return pathUtils.parse(fileName).name;
                }
            }
        }
        throw new Error('Could not find nupkg file name for: ' + libraryPath);
    }
}
exports.AssetsUtils = AssetsUtils;
//# sourceMappingURL=Utils.js.map